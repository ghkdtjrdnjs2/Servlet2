1. 추상메소드 : 메소드의 설계도
- 부모 클래스는 메소드의 이름을 정해준다
  자식 클래스는 부모가 정해준 메소드를 오버라이드한다
- 부모의 메소드가 추상메소드라면(아닐수도있다) 자식에게 메소드 구현을 강제한다
- Object, HttpServlet은 추상메소드를 사용하지 않는다 -> 선택
- Object의 메소드 : equals, toString...
  
2. 추상 클래스
- 추상 메소드를 가지는 클래스(표준에 해당하는 부모 클래스)
- 객체를 생성할 수 없고 abstract 키워드를 사용하지 않을 경우 오류 발생

3.인터페이스(interface)
- 추상메소드"만" 가지는 클래스의 변종
- extends 대신 implements를 사용

4. 웹서버
- 사용자는 요청을 웹서버에 보낸다
- 웹서버는 요청을 접수한 다음 html,css,js,이미지등을 담은 응답을 사용자에게 보낸다

5. WAS : 동적으로 html 생성
- 사용자는 요청을 웹서버로 보낸다
- 웹서버는 정적인 요청(html,css...)인 경우 직접 응답
  동적인 요청인 경우 WAS로 요청을 전달
- 요청을 전달받은 WAS는 자바 프로그램(서블릿)을 실행해 html을 생성 후 웹서버에 전달

6. 서블릿(Servlet)
- 웹서버에서 실행되는 자바 클래스 표준->표준이라는 단어가 나오면 부모가 있다는 소리(상속가능)
- get 방식 요청에 응답하는 doGet()
- post 방식 요청에 응답하는 doPost()
- 응답을 html로 출력한다 -> 프론트는 할일 X 
- WAS(Web Application Server) : 서블릿이 돌려주는 서버
- Servlet - WAS가 돌려주는 자바프로그램(표준)
			표준이라는 것은 부모클래스가있는것 -> 부모클래스는 메소드 이름을 정해준다

7. forward와 redirect
- MVC에서 하나의 직업(하나의 주소)는 컨트롤러와 여러개의 뷰로 구성
- 하나의 작업 내부에서 이동 : forward
	- request가 이어진다
	- 주소가 바뀌지 않는다
- 새로운 작업으로 이동 : redirect
	- request가 파괴되고 새로 만들어진다
	- 주소가 바뀐다


- Web의 구조 
-		 요청->
- 사용자 <-----> 서버
-		 <-응답

- Web은 정적이다
- 동적인 Web을 만들자
- 웹은 정적이다 만약 시계를 보여주려고 한다면 매분 매초마다 새로운걸 꺼낼순 없다
  그런 점을 고치기 위해서는 동적인 웹을 만들어야한다
  서버에서 프로그램이 실행되어 html을 생성함으로 동적 웹을 만들고
  servlet을 실행해 html을 생성하는 서버를 was라고 한다
    
